name: Python API tests

on:
  workflow_call:
    inputs:
      runner:
        description: 'Machine on which the tests would run'
        type: string
        required: true
      container:
        description: 'JSON to be converted to the value of the "container" configuration for the job'
        type: string
        required: false
        default: '{"image": null}'
      affected-components:
        description: 'Components that are affected by changes in the commit defined by the Smart CI Action'
        type: string
        required: true
      python-version:
        description: 'Python version to setup. E.g., "3.11"'
        type: string
        required: true

permissions: read-all

env:
  PIP_CACHE_PATH: /mount/caches/pip/linux

jobs:
  Python_Unit_Tests:
    name: Python API tests
    if: ${{ fromJSON(inputs.affected-components).Python_API.test || fromJSON(inputs.affected-components).docs_snippets.test }}
    timeout-minutes: 30
    runs-on: ${{ inputs.runner }}
    container: ${{ fromJSON(inputs.container) }}
    defaults:
      run:
        shell: bash
    env:
      DEBIAN_FRONTEND: noninteractive # to prevent apt-get from waiting user input
      INSTALL_DIR: ${{ github.workspace }}/install
      INSTALL_TEST_DIR: ${{ github.workspace }}/install/openvino_tests
      INSTALL_WHEELS_DIR: ${{ github.workspace }}/install/openvino_wheels
    steps:
      - name: Download OpenVINO artifacts (tarballs and wheels)
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          pattern: openvino_@(wheels|tests)
          path: ${{ env.INSTALL_DIR }}
          merge-multiple: true

      # Needed as ${{ github.workspace }} is not working correctly when using Docker
      - name: Setup Variables
        run: |
          echo "INSTALL_DIR=$GITHUB_WORKSPACE/install" >> "$GITHUB_ENV"
          echo "INSTALL_TEST_DIR=$GITHUB_WORKSPACE/install/openvino_tests" >> "$GITHUB_ENV"
          echo "INSTALL_WHEELS_DIR=$GITHUB_WORKSPACE/install/openvino_wheels" >> "$GITHUB_ENV"

      - name: Install OpenVINO dependencies (mac)
        if: runner.os == 'macOS'
        run: brew install pigz

      - name: Extract OpenVINO packages
        run: pigz -dc openvino_tests.tar.gz | tar -xf - -C ${INSTALL_TEST_DIR}
        working-directory: ${{ env.INSTALL_TEST_DIR }}

      - name: Fetch setup_python and install wheels actions
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        timeout-minutes: 15
        with:
          sparse-checkout: |
            .github/actions
            src/bindings/python/scripts/generate_pyapi_stubs.py
            src/bindings/python/**/*.pyi
          sparse-checkout-cone-mode: false
          path: 'action_root'

      - name: Setup Python ${{ inputs.python-version }}
        uses: ./action_root/.github/actions/setup_python
        with:
          version: ${{ inputs.python-version }}
          pip-cache-path: ${{ runner.os == 'Linux' && env.PIP_CACHE_PATH || '' }}
          should-setup-pip-paths: ${{ runner.os == 'Linux' }}
          self-hosted-runner: ${{ runner.os == 'Linux' }}

      #
      # Tests
      #

      - name: Find OpenVINO wheel
        uses: ./action_root/.github/actions/find_wheel
        id: ov_wheel
        with:
          wheels_dir: '${{ env.INSTALL_DIR }}/openvino_wheels'
          package_name: 'openvino'
      
      - name: Configure poetry
        uses: ./action_root/.github/actions/install_poetry
             
      - name: Install OpenVINO wheel
        run: poetry add ${{ steps.ov_wheel.outputs.wheel_path }}
        
      - name: Install Test dependencies
        run: poetry install --with tests

      - name: Verify Python stub .pyi files
        uses: ./action_root/.github/actions/validate_pyi_files
        continue-on-error: true

      #
      # Tests
      #

      - name: Python API Tests
        if: fromJSON(inputs.affected-components).Python_API.test
        run: |
          # for 'template' extension
          export LD_LIBRARY_PATH=${INSTALL_TEST_DIR}/tests/:$LD_LIBRARY_PATH
          poetry run pytest -sv ${INSTALL_TEST_DIR}/tests/pyopenvino \
            --junitxml=${INSTALL_TEST_DIR}/TEST-Pyngraph.xml \
            --ignore=${INSTALL_TEST_DIR}/tests/pyopenvino/tests/test_utils/test_utils.py

      - name: Python API Tests -- numpy<2.0.0
        if: fromJSON(inputs.affected-components).Python_API.test
        run: |
          poetry add numpy@1.26.0
          poetry install --with tests
          # for 'template' extension
          export LD_LIBRARY_PATH=${INSTALL_TEST_DIR}/tests/:$LD_LIBRARY_PATH
          poetry run pytest -sv ${INSTALL_TEST_DIR}/tests/pyopenvino \
            --junitxml=${INSTALL_TEST_DIR}/TEST-Pyngraph_new_numpy.xml \
            --ignore=${INSTALL_TEST_DIR}/tests/pyopenvino/tests/test_utils/test_utils.py

      - name: Clone API snippets
        if: ${{ runner.os != 'macOS' && fromJSON(inputs.affected-components).docs_snippets.test }}
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        timeout-minutes: 15
        with:
          sparse-checkout: docs/articles_en/assets/snippets
          submodules: 'false'

      - name: Docs Python snippets
        if: ${{ runner.os != 'macOS' && fromJSON(inputs.affected-components).docs_snippets.test }}
        run: |
          # torch, onnx
          poetry install --with onnx
          # to find 'snippets' module in docs
          export PYTHONPATH=docs/articles_en/assets
          # for 'template' extension
          export LD_LIBRARY_PATH=${INSTALL_TEST_DIR}/tests/:$LD_LIBRARY_PATH
          poetry run docs/articles_en/assets/snippets/main.py

      - name: Upload Test Results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: ${{ !cancelled() }}
        with:
          name: test-results-python-api-${{ inputs.python-version }}
          path: |
            ${{ env.INSTALL_TEST_DIR }}/TEST*.html
            ${{ env.INSTALL_TEST_DIR }}/TEST*.xml
          if-no-files-found: 'warn'
